from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
import asyncio
from loader import dp
from googletrans import Translator
from keyboards.inline import Lang_keys
from states.new_state import Lang
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(f"Salom, {message.from_user.full_name}!\nTarjimon botiga hush kelibsiz")
    await message.answer("Menga so'z yuboring. Men esa sizga tarjima qilaman.")

@dp.message_handler(state=None)
async def bot_echo(message: types.Message,state:FSMContext):
    text=message.text
    await state.update_data(text=text)
    await message.answer("Tilni tanlang.", reply_markup=Lang_keys)

@dp.callback_query_handler(text="uz")
async def lang_uz(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "No data found")
    if text!="No data found":
        translated= await translate_text(text, "uz")
        await callback_query.message.answer(translated)

@dp.callback_query_handler(text="ru")
async def lang_uz(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "No data found")
    if text!="No data found":
        translated= await translate_text(text, "ru")
        await callback_query.message.answer(translated)

@dp.callback_query_handler(text="en")
async def lang_uz(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "No data found")
    if text!="No data found":
        translated= await translate_text(text, "en")
        await callback_query.message.answer(translated)

async def translate_text(text, dest):
    async with Translator() as translator:
        result = await translator.translate(text,dest=dest)
        return result